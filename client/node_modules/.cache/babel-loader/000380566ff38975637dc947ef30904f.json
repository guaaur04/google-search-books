{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\auric\\\\code\\\\google-search-books\\\\client\\\\src\\\\pages\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Nav from \"../components/Nav\";\nimport Hero from \"../components/Hero\";\nimport Card from \"../components/Card\";\nimport { Input, FormBtn } from \"../components/Form\";\nimport API from \"../utils/API\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Search() {\n  _s();\n\n  // Setting our component's initial state\n  const [books, setBooks] = useState([]);\n  const [formObject, setFormObject] = useState({}); // Load all books and store them with setBooks\n\n  useEffect(() => {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(res => setBooks(res.data)).catch(err => console.log(err));\n  }\n\n  ;\n\n  function handleInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormObject({ ...formObject,\n      [name]: value\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        authors: formObject.authors,\n        description: formObject.description,\n        image: formObject.image,\n        link: formObject.link\n      }).then(res => loadBooks()).catch(err => console.log(err));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Hero, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        onChange: handleInputChange,\n        name: \"title\",\n        placeholder: \"Book (required)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(FormBtn, {\n        onClick: handleFormSubmit,\n        children: \"Book Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Card, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: books.map(book => /*#__PURE__*/_jsxDEV(ListItem, {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/books/\" + book._id,\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [book.title, \" by \", book.authors]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(DeleteBtn, {\n            onClick: () => deleteBook(book._id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this)]\n        }, book._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Search, \"UqfM0h0i9og713UvocqePx2+GPk=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/auric/code/google-search-books/client/src/pages/Search.js"],"names":["React","Nav","Hero","Card","Input","FormBtn","API","Search","books","setBooks","useState","formObject","setFormObject","useEffect","loadBooks","getBooks","then","res","data","catch","err","console","log","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","title","author","saveBook","authors","description","image","link","map","book","_id","deleteBook"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Nav from \"../components/Nav\";\r\nimport Hero from \"../components/Hero\";\r\nimport Card from \"../components/Card\";\r\nimport { Input, FormBtn } from \"../components/Form\";\r\nimport API from \"../utils/API\";\r\n\r\n\r\n\r\nfunction Search() {\r\n\r\n  // Setting our component's initial state\r\n  const [books, setBooks] = useState([])\r\n  const [formObject, setFormObject] = useState({})\r\n\r\n  // Load all books and store them with setBooks\r\n  useEffect(() => {\r\n    loadBooks()\r\n  }, [])\r\n\r\n  // Loads all books and sets them to books\r\n  function loadBooks() {\r\n    API.getBooks()\r\n      .then(res => \r\n        setBooks(res.data)\r\n      )\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  function handleInputChange(event) {\r\n    const { name, value } = event.target;\r\n    setFormObject({...formObject, [name]: value})\r\n  };\r\n\r\n   // When the form is submitted, use the API.saveBook method to save the book data\r\n  // Then reload books from the database\r\n  function handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    if (formObject.title && formObject.author) {\r\n      API.saveBook({\r\n        title: formObject.title,\r\n        authors: formObject.authors,\r\n        description: formObject.description,\r\n        image: formObject.image,\r\n        link: formObject.link\r\n      })\r\n        .then(res => loadBooks())\r\n        .catch(err => console.log(err));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <Nav />\r\n        <Hero />\r\n      <h1>Search</h1>\r\n\r\n      <form>\r\n              <Input\r\n                onChange={handleInputChange}\r\n                name=\"title\"\r\n                placeholder=\"Book (required)\"\r\n              />\r\n              <FormBtn \r\n                onClick={handleFormSubmit}\r\n              >\r\n              Book Search\r\n              </FormBtn>\r\n\r\n              <Card /> \r\n\r\n\r\n              <List>\r\n                {books.map(book => (\r\n                  <ListItem key={book._id}>\r\n                    <Link to={\"/books/\" + book._id}>\r\n                      <strong>\r\n                        {book.title} by {book.authors}\r\n                      </strong>\r\n                    </Link>\r\n                    <DeleteBtn onClick={() => deleteBook(book._id)} />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n              \r\n            </form>\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}